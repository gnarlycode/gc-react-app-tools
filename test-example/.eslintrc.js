const isEditor = Boolean(process.env.VSCODE_PID)
const isProd = Boolean(process.env.NODE_ENV !== 'development')
const isDev = Boolean(process.env.NODE_ENV === 'development')

const checkConsole = !isEditor && isProd

// Ecmascript
const esRules = {
  // Possible Errors
  'getter-return': 'error',
  'no-async-promise-executor': 'error',
  'no-await-in-loop': 'error',
  'no-cond-assign': 'error',
  'no-console': checkConsole ? ['error', { allow: ['error', 'info'] }] : 'off',
  // 'no-console': ['error', { allow: ['error'] }],
  'no-constant-condition': 'error',
  'no-control-regex': 'error',
  'no-debugger': 'error',
  'no-dupe-args': 'error',
  'no-dupe-keys': 'error',
  'no-duplicate-case': 'error',
  'no-empty': 'error',
  'no-empty-character-class': 'error',
  'no-ex-assign': 'error',
  'no-extra-boolean-cast': 'error',
  'no-func-assign': 'error',
  'no-import-assign': 'error',
  'no-inner-declarations': 'error',
  'no-invalid-regexp': 'error',
  'no-misleading-character-class': 'error',
  'no-obj-calls': 'error',
  'no-regex-spaces': 'error',
  'no-sparse-arrays': 'error',
  'no-template-curly-in-string': 'error',
  'no-unexpected-multiline': 'error',
  'no-unreachable': 'error',
  'no-unsafe-finally': 'error',
  'no-unsafe-negation': 'error',
  'require-atomic-updates': 'error',
  'use-isnan': 'error',
  'valid-typeof': 'error',
  'no-array-constructor': 'error',

  // Best Practices
  'array-callback-return': 'error',
  'block-scoped-var': 'error',
  'dot-notation': 'error',
  eqeqeq: 'error',
  // 'no-alert': 'error',
  'no-caller': 'error',
  'no-case-declarations': 'error',
  'no-div-regex': 'error',
  'no-else-return': 'error',
  'no-empty-function': 'error',
  'no-empty-pattern': 'error',
  'no-eq-null': 'error',
  'no-eval': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'error',
  'no-extra-label': 'error',
  'no-fallthrough': 'error',
  'no-global-assign': 'error',
  'no-implied-eval': 'error',
  'no-invalid-this': 'error',
  'no-iterator': 'error',
  'no-labels': 'error',
  'no-lone-blocks': 'error',
  'no-loop-func': 'error',
  'no-multi-str': 'error',
  'no-new': 'error',
  'no-new-wrappers': 'error',
  'no-octal': 'error',
  'no-octal-escape': 'error',
  'no-param-reassign': 'error',
  'no-redeclare': 'error',
  'no-return-assign': 'error',
  'no-return-await': 'error',
  'no-script-url': 'error',
  'no-self-compare': 'error',
  'no-sequences': 'error',
  'no-self-assign': 'error',
  'no-throw-literal': 'error',
  'no-unmodified-loop-condition': 'error',
  'no-unused-labels': 'error',
  'no-useless-call': 'error',
  'no-useless-catch': 'error',
  'no-useless-concat': 'error',
  'no-useless-escape': 'error',
  'no-useless-return': 'error',
  'no-with': 'error',
  'prefer-regex-literals': 'error',
  'require-await': 'error',
  'wrap-iife': ['error', 'outside'],
  yoda: 'error',

  // Variables
  'no-delete-var': 'error',
  'no-label-var': 'error',
  'no-shadow': 'error',
  'no-shadow-restricted-names': 'error',
  'no-undef': 'error',
  'no-unused-vars': isDev ? 'off' : 'error',
  // 'no-use-before-define': 'error',

  // Stylistic Issues
  'eol-last': ['error', 'always'],
  'func-style': ['error', 'expression'],
  'jsx-quotes': ['error', 'prefer-double'],
  'linebreak-style': ['error', 'unix'],
  'lines-between-class-members': [
    'error',
    'always',
    { exceptAfterSingleLine: true },
  ],
  'no-lonely-if': 'error',
  'no-mixed-spaces-and-tabs': 'error',
  'no-multi-assign': 'error',
  'no-multiple-empty-lines': 'error',
  'no-nested-ternary': 'error',
  'no-tabs': 'error',
  'no-trailing-spaces': 'error',
  'no-unneeded-ternary': 'error',
  'nonblock-statement-body-position': ['error', 'beside'],
  'one-var-declaration-per-line': 'error',
  'operator-assignment': ['error', 'always'],
  'prefer-object-spread': 'error',
  'arrow-parens': ['error', 'as-needed'],
  'constructor-super': 'error',
  'no-class-assign': 'error',
  'no-const-assign': 'error',
  'no-dupe-class-members': 'error',
  'no-duplicate-imports': 'error',
  'no-new-symbol': 'error',
  'no-this-before-super': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-constructor': 'error',
  'no-useless-rename': 'error',
  'no-var': 'error',
  'object-shorthand': 'error',
  'prefer-arrow-callback': 'error',
  'prefer-const': 'error',
  'prefer-rest-params': 'error',
  'prefer-spread': 'error',
  'require-yield': 'error',
}

// React
const reactRules = {
  'react/boolean-prop-naming': 'error',
  'react/button-has-type': 'error',
  'react/no-access-state-in-setstate': 'error',
  'react/no-children-prop': 'error',
  'react/no-danger-with-children': 'error',
  'react/no-deprecated': 'error',
  'react/no-deprecated': 'error',
  'react/no-direct-mutation-state': 'error',
  'react/no-find-dom-node': 'error',
  'react/no-is-mounted': 'error',
  'react/no-redundant-should-component-update': 'error',
  'react/no-render-return-value': 'error',
  'react/no-string-refs': 'error',
  'react/no-this-in-sfc': 'error',
  'react/no-unescaped-entities': 'error',
  'react/no-unused-state': 'error',
  'react/prefer-stateless-function': 'error',
  'react/react-in-jsx-scope': 'error',
  'react/require-render-return': 'error',
  'react/self-closing-comp': 'error',
  'react/sort-comp': 'error',
  'react/state-in-constructor': 'error',
  'react/style-prop-object': 'error',
  'react/jsx-boolean-value': 'error',
  'react/jsx-key': 'error',
  'react/jsx-no-bind': ['error', { allowArrowFunctions: true }],
  'react/jsx-no-comment-textnodes': 'error',
  'react/jsx-no-duplicate-props': 'error',
  'react/jsx-no-undef': 'error',
  'react/jsx-no-useless-fragment': 'error',
  'react/jsx-fragments': 'error',
  'react/jsx-pascal-case': 'error',
  'react/jsx-uses-react': 'error',
  'react/jsx-uses-vars': 'error',
}

// Typescript
const tsRules = {
  'no-undef': 'off',
  'no-const-assign': 'off',
  'no-this-before-super': 'off',
  'no-dupe-class-members': 'off',
  'react/jsx-no-undef': 'off',
  // 'no-use-before-define': 'off',
  // '@typescript-eslint/no-use-before-define': 'error',
  // '@typescript-eslint/no-explicit-any': 'error',
  '@typescript-eslint/adjacent-overload-signatures': 'error',
  '@typescript-eslint/array-type': 'error',
  '@typescript-eslint/ban-ts-ignore': 'error',
  '@typescript-eslint/class-name-casing': 'error',
  '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
  '@typescript-eslint/consistent-type-assertions': [
    'error',
    { assertionStyle: 'as' },
  ],
  '@typescript-eslint/explicit-member-accessibility': 'error',
  '@typescript-eslint/member-delimiter-style': [
    'error',
    { multiline: { delimiter: 'none' } },
  ],
  'no-array-constructor': 'off',
  '@typescript-eslint/no-array-constructor': 'error',
  '@typescript-eslint/member-ordering': 'error',
  'no-empty-function': 'off',
  '@typescript-eslint/no-empty-function': 'error',
  '@typescript-eslint/no-misused-new': 'error',
  '@typescript-eslint/no-non-null-assertion': 'error',
  'no-constant-condition': 'off',
  '@typescript-eslint/no-unnecessary-condition': ['error', { ignoreRhs: true }],
  '@typescript-eslint/no-unnecessary-qualifier': 'error',
  '@typescript-eslint/no-unnecessary-type-arguments': 'error',
  '@typescript-eslint/no-unnecessary-type-assertion': 'error',
  'no-unused-vars': 'off',
  '@typescript-eslint/no-unused-vars': isDev ? 'off' : 'error',
  '@typescript-eslint/no-useless-constructor': 'error',
  '@typescript-eslint/prefer-includes': 'error',
  'require-await': 'off',
  // '@typescript-eslint/require-await': 'error',
  '@typescript-eslint/unbound-method': 'error',
}

module.exports = {
  env: { browser: true, es6: true, node: true },
  parserOptions: {
    ecmaFeatures: { jsx: true },
    ecmaVersion: 2018,
    sourceType: 'module',
  },
  plugins: ['react', 'prettier'],
  rules: {
    ...esRules,
    ...reactRules,
  },
  settings: { react: { version: 'detect' } },
  overrides: [
    {
      files: ['**/*.ts', '**/*.tsx'],
      env: { browser: true, es6: true, node: true },
      plugins: ['prettier', '@typescript-eslint', 'react'],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        ecmaFeatures: { jsx: true },
        ecmaVersion: 2018,
        sourceType: 'module',
        project: './tsconfig.json',
      },
      rules: {
        ...esRules,
        ...tsRules,
        ...reactRules,
      },
      settings: { react: { version: 'detect' } },
    },
  ],
}
